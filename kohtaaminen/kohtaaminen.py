# -*- coding: utf-8 -*-
# pylint: disable=expression-not-assigned,line-too-long
"""Meeting, rendezvous, confluence (Finnish kohtaaminen) mark up, down, and up again. API."""
import itertools
import os
import pathlib
import re
import sys
import tempfile
import zipfile
from typing import List, Optional, Tuple, Union

import mdformat
import pypandoc  # type: ignore

DEBUG_VAR = 'KOHTAAMINEN_DEBUG'
DEBUG = os.getenv(DEBUG_VAR)

ENCODING = 'utf-8'
ENCODING_ERRORS_POLICY = 'ignore'

STDIN, STDOUT = 'STDIN', 'STDOUT'
DISPATCH = {
    STDIN: sys.stdin,
    STDOUT: sys.stdout,
}

MD_ROOT = pathlib.Path('kohtaaminen-md')


def verify_request(argv: Optional[List[str]]) -> Tuple[int, str, List[str]]:
    """Fail with grace."""
    if not argv or len(argv) != 2:
        return 2, 'received wrong number of arguments', ['']

    command, inp = argv

    if command not in ('translate'):
        return 2, 'received unknown command', ['']

    if inp:
        in_path = pathlib.Path(str(inp))
        if not in_path.is_file():
            return 1, f'source ({in_path}) is no file', ['']
        if not ''.join(in_path.suffixes).lower().endswith('.zip'):
            return 1, 'source has not .zip extension', ['']

    return 0, '', argv


def main(argv: Union[List[str], None] = None) -> int:
    """Drive the translation."""
    error, message, strings = verify_request(argv)
    if error:
        print(message, file=sys.stderr)
        return error

    command, inp = strings
    if not zipfile.is_zipfile(inp):
        print('wrong magic number in zipfile')
        return 1

    tasks = []
    with zipfile.ZipFile(inp, 'r') as zipper:
        alert = False
        for name in zipper.namelist():
            if not name[0].isidentifier() or '..' in name:
                alert = True
            print(f'- {name}')
        if alert:
            print('suspicious entries in zip file')
            return 1

        with tempfile.TemporaryDirectory() as unpack:
            zipper.extractall(path=unpack)
            print(f'traversing unpack ({unpack})')
            for place in sorted(pathlib.Path(unpack).glob('**')):
                print(f'* {place}')
                for thing in sorted(place.iterdir()):
                    if thing.is_dir():
                        continue
                    if thing.suffixes[-1] == '.html':
                        tasks.append(thing)
                    print(f'  - {thing}')

            out_root = MD_ROOT
            print(f'would translate html tree from ({inp if inp else STDIN}) into markdown tree below {out_root}')

            print('tasks:')
            start = None
            for task in tasks:
                if task.name == 'index.html':
                    start = task
                    break

            for task in tasks:
                marker = ' *' if task == start else ''
                print(f'- {task}{marker}')

            if not start:
                print('did not find start target')
                return 1

            index_path = out_root / 'index.md'
            index_path.parent.mkdir(parents=True, exist_ok=True)
            output = pypandoc.convert_file(str(start), 'markdown_github', outputfile=str(index_path))
            assert output == ''
            with open(index_path, 'rt', encoding=ENCODING) as handle:
                lines = [
                    line.rstrip()
                    for line in handle.readlines()
                    if '</div>' not in line and '<div ' not in line
                ]
            less_noisy_lines = ['# Index']
            noise_end_token, noise_end_seen = '## Available Pages:', False
            for line in lines:
                if noise_end_seen:
                    less_noisy_lines.append(line)
                else:
                    noise_end_seen = line.startswith(noise_end_token)
            text = '\n'.join(
                line
                for line in itertools.takewhile(lambda x: 'Document generated by ' not in x, less_noisy_lines)
            )
            text = re.sub(r'\n\s*\n', '\n\n', text)  # squeeze space-only and blank lines
            text = text.lstrip('\n')  # no leading new lines
            text = text.rstrip('\n') + '\n'  # single new line at end of file
            with open(index_path, 'wt', encoding=ENCODING) as handle:
                handle.write(text)
            mdformat.file(index_path, options={'number': True, 'wrap': 142,})

            for task in tasks:
                if task == start:
                    continue
                task_path = out_root / task.name.replace('html', 'md')
                output = pypandoc.convert_file(str(task), 'markdown_github', outputfile=str(task_path))
                assert output == ''
                with open(task_path, 'rt', encoding=ENCODING) as handle:
                    lines = [
                        line.rstrip()
                        for line in handle.readlines()
                        if '</div>' not in line and '<div ' not in line
                    ]
                lines = [
                    line
                    for line in lines if 'Created by <span class="author"> ' not in line
                ]
                for ndx, line in enumerate(lines):
                    if '# <span id="title-text">' in line:
                        prefix, title_plus = line.split('# <span id="title-text">', 1)
                        title = title_plus.strip().rstrip('</span>').strip()
                        lines[ndx] = f'{prefix}# {title}'
                    elif line.startswith('``` syntaxhighlighter-pre'):
                        lines[ndx] = '```'
                    elif '"><img src="' in line:
                        # <span
                        # class="kohtaaminen-embedded-file-wrapper image-center-wrapper"><img src="attachments/2656469010/2656469021.jpg" class="kohtaaminen-embedded-image image-center" loading="lazy" data-i
                        later_head, image_tail = line.split('"><img src="', 1)
                        later = f'{later_head}>\n'
                        print(f'1 {later=}')
                        print(f'2 {image_tail=}')
                        # attachments/2656469010/2656469021.jpg" class="kohtaaminen-embedded-image image-center" loading="laz
                        # │ y" data-image-src="attachments/2656469010/2656469021.jpg" data-height="640" data-width="1279" data-unresolved-comment-count="0" data-linked-resource-id="2656469021" data-li
                        # │ nked-resource-version="1" data-linked-resource-type="attachment" data-linked-resource-default-alias="tool-knit-social-media-1280x640_IMG_2175.jpg" data-base-url="https://ex
                        # │ ample.com/wiki" data-linked-resource-content-type="image/jpeg" data-linked-resource-container-id="2656469010" data-linked-resource-container-version="1" data-media-id="205a
                        #  612b-6a20-4343-ab1c-e5a28cc1b552" data-media-type="file" /></span>
                        src, rest = image_tail.split('" ', 1)
                        print(f'3 {src=}')
                        print(f'4 {rest=}')
                        # class="kohtaaminen-embedded-image image-center" loading="laz
                        # │ y" data-image-src="attachments/2656469010/2656469021.jpg" data-height="640" data-width="1279" data-unresolved-comment-count="0" data-linked-resource-id="2656469021" data-li
                        # │ nked-resource-version="1" data-linked-resource-type="attachment" data-linked-resource-default-alias="tool-knit-social-media-1280x640_IMG_2175.jpg" data-base-url="https://ex
                        # │ ample.com/wiki" data-linked-resource-content-type="image/jpeg" data-linked-resource-container-id="2656469010" data-linked-resource-container-version="1" data-media-id="205a
                        #  612b-6a20-4343-ab1c-e5a28cc1b552" data-media-type="file" /></span>
                        _, height_plus = rest.split('data-height="', 1)
                        print(f'5 {height_plus=}')
                        height, width_plus = height_plus.split('" data-width="', 1)
                        print(f'6 {height=}')
                        width, _ = width_plus.split('" ', 1)
                        print(f'7 {width=}')
                        center = 'image-center' in line
                        print(f'8 {center=}')
                        span_tail = line.endswith('</span>')
                        print(f'9 {span_tail=}')
                        image = f'![]({src}){{width:{width}, height:{height}, center:{"true" if center else "false"}}}'
                        print(f'A {image=}')
                        lines[ndx] = later + image
                        if span_tail:
                            lines[ndx] += '\n</span>'
                        print(f'B {lines[ndx]=}')
                        print(f'C {ndx=}\n')
                resplit = []
                for line in lines:
                    if '\n' not in line:
                        resplit.append(line)
                    else:
                        for lin in line.split('\n'):
                            resplit.append(lin)
                lines = [
                    line
                    for line in resplit
                    if not line.startswith('<span')
                        and not line.startswith('class="')
                        and line.strip() != '</span>'
                ]
                lines = [
                    line
                    for line in itertools.takewhile(lambda x: 'Document generated by ' not in x, lines)
                ]
                text = '\n'.join(
                    line
                    for line in itertools.takewhile(lambda x: not x.startswith('## Attachments:'), lines)
                )
                text = re.sub(r'\n\s*\n', '\n\n', text)  # squeeze space-only and blank lines
                text = text.lstrip('\n')  # no leading new lines
                text = text.rstrip('\n') + '\n'  # single new line at end of file

                with open(task_path, 'wt', encoding=ENCODING) as handle:
                    handle.write(text + '\n')
                mdformat.file(task_path, options={'number': True, 'wrap': 142,})

    return 0
